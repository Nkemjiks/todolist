{"version":3,"sources":["logo.png","Navbar.js","OngoingTodo.js","CompletedTodo.js","TodoItems.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","react_default","a","createElement","className","href","style","marginRight","marginLeft","src","require","alt","width","Component","OngoingTodo","state","isChecked","toggleCheckboxChange","event","persist","handlesCheck","_this","props","target","value","_this2","this","ongoing","map","index","key","checked","onChange","type","id","htmlFor","CompletedTodo","done","disabled","textDecoration","TodoItem","todo","addTodo","preventDefault","_this$state","addTodos","push","setState","saveToLocalStorage","_this$state2","localStorage","setItem","JSON","stringify","handleChange","Object","defineProperty","name","handleCheck","_this$state3","removeTodo","indexOf","splice","completed","storage","getItem","todos","parse","_this$state4","onSubmit","placeholder","aria-label","aria-describedby","height","length","src_OngoingTodo","src_CompletedTodo","App","src_Navbar","TodoItems","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.037c357f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.1b566cca.png\";","import React, { Component } from \"react\";\n\nclass Navbar extends Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-light bg-white text-center\">\n        <a\n          className=\"navbar-brand\"\n          href=\"/\"\n          style={{ marginRight: \"auto\", marginLeft: \"auto\" }}\n        >\n          <img\n            src={require(\"./logo.png\")}\n            alt=\"logo\"\n            style={{ width: \"230px\" }}\n          />\n        </a>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from \"react\";\n\nclass OngoingTodo extends Component {\n  state = {\n    isChecked: false\n  };\n\n  toggleCheckboxChange = event => {\n    event.persist();\n    const { handlesCheck } = this.props;\n    handlesCheck(event.target.value);\n  };\n\n  render() {\n    const { ongoing } = this.props;\n    return ongoing.map((value, index) => (\n      <div className=\"form-check\" key={index}>\n        <input\n          className=\"form-check-input\"\n          value={value}\n          checked={this.state.isChecked}\n          onChange={this.toggleCheckboxChange}\n          type=\"checkbox\"\n          id=\"defaultCheck1\"\n        />\n        <label className=\"form-check-label\" htmlFor=\"defaultCheck1\">\n          {value}\n        </label>\n      </div>\n    ));\n  }\n}\n\nexport default OngoingTodo;\n","import React from \"react\";\n\nconst CompletedTodo = props =>\n  props.done.map((value, index) => (\n    <div className=\"form-check\" key={index}>\n      <input\n        className=\"form-check-input\"\n        type=\"checkbox\"\n        id=\"defaultCheck2\"\n        disabled\n        checked\n      />\n      <label\n        className=\"form-check-label\"\n        htmlFor=\"defaultCheck2\"\n        style={{ textDecoration: \"line-through\" }}\n      >\n        {value}\n      </label>\n    </div>\n  ));\n\nexport default CompletedTodo;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport OngoingTodo from \"./OngoingTodo.js\";\nimport CompletedTodo from \"./CompletedTodo.js\";\n\nclass TodoItem extends Component {\n  state = {\n    ongoing: [],\n    done: [],\n    todo: \"\"\n  };\n\n  componentDidMount() {\n    const storage = localStorage.getItem(\"todos\");\n\n    if (storage) {\n      const todos = JSON.parse(storage);\n      this.setState({\n        ongoing: todos.ongoing,\n        done: todos.done\n      });\n    }\n  }\n\n  addTodo = event => {\n    event.preventDefault();\n\n    const { ongoing, todo } = this.state;\n    if(todo !== '') {\n      const addTodos = ongoing;\n      addTodos.push(todo);\n      this.setState({\n        ongoing: addTodos,\n        todo: \"\"\n      });\n      this.saveToLocalStorage();\n    }\n  };\n\n  saveToLocalStorage = () => {\n    const { ongoing, done } = this.state;\n    localStorage.setItem(\"todos\", JSON.stringify({ ongoing, done }))\n  }\n\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  };\n\n  handleCheck = value => {\n    const { ongoing, done } = this.state;\n\n    const removeTodo = ongoing;\n    const index = removeTodo.indexOf(value);\n    removeTodo.splice(index, 1);\n\n    const completed = done;\n    completed.push(value);\n\n    this.setState({\n      ongoing: removeTodo,\n      done: completed\n    });\n\n    this.saveToLocalStorage();\n  };\n\n  render() {\n    const { ongoing, done, todo } = this.state;\n\n    return (\n      <div className=\"container\">\n        <form className=\"input-group mt-3 mb-3\" onSubmit={this.addTodo}>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            name=\"todo\"\n            value={todo}\n            onChange={this.handleChange}\n            placeholder=\"Add todo\"\n            aria-label=\"Add todo\"\n            aria-describedby=\"button-addon2\"\n          />\n          <div className=\"input-group-append\">\n            <button\n              className=\"btn btn-outline-secondary\"\n              type=\"submit\"\n              id=\"button-addon2\"\n            >\n              Add\n            </button>\n          </div>\n        </form>\n        <div\n          className=\"d-flex justify-content-between mt-5\"\n          style={{ height: \"73vh\" }}\n        >\n          <div className=\"col bg-secondary mr-3 px-3 py-3 rounded text-light\">\n            <h3>Ongoing</h3>\n            {ongoing.length === 0 && <em>You have not added any todos</em>}\n            {ongoing.length !== 0 && (\n              <OngoingTodo ongoing={ongoing} handlesCheck={this.handleCheck} />\n            )}\n          </div>\n          <div className=\"col vh-90 bg-light ml-3 px-3 py-3 rounded\">\n            <h3>Done</h3>\n            {done.length === 0 && <em>You have not completed any todos yet</em>}\n            {done.length !== 0 && <CompletedTodo done={done} />}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TodoItem;\n","import React, { Component } from \"react\";\nimport Navbar from \"./Navbar.js\";\nimport TodoItem from \"./TodoItems.js\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar />\n        <TodoItem />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}